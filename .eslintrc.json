{
  "overrides": [
    {
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "files": [
        "*.ts"
      ],
      "globals": {
        "afterEach": "readonly",
        "beforeEach": "readonly",
        "describe": "readonly",
        "expect": "readonly",
        "it": "readonly",
        "jasmine": "readonly"
      },
      "parserOptions": {
        "createDefaultProgram": true,
        "project": [
          "tsconfig.*?.json"
        ]
      },
      "plugins": [
        "eslint-plugin-unicorn",
        "eslint-plugin-no-null"
      ],
      "rules": {
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": [
              "Component"
            ]
          }
        ],
        "@angular-eslint/component-max-inline-declarations": [
          "error",
          {
            "animations": 8,
            "styles": 1,
            "template": 1
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "prefix": "easy",
            "style": "kebab-case",
            "type": "element"
          }
        ],
        "@angular-eslint/contextual-decorator": [
          "error"
        ],
        "@angular-eslint/contextual-lifecycle": [
          "error"
        ],
        "@angular-eslint/directive-class-suffix": [
          "error",
          {
            "suffixes": [
              "Directive"
            ]
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "prefix": "easy",
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        "@angular-eslint/no-attribute-decorator": [
          "error"
        ],
        "@angular-eslint/no-conflicting-lifecycle": [
          "error"
        ],
        "@angular-eslint/no-empty-lifecycle-method": [
          "error"
        ],
        "@angular-eslint/no-forward-ref": [
          "error"
        ],
        "@angular-eslint/no-host-metadata-property": [
          "error"
        ],
        "@angular-eslint/no-input-prefix": [
          "error",
          {
            "prefixes": [
              "can",
              "has",
              "is",
              "should"
            ]
          }
        ],
        "@angular-eslint/no-input-rename": [
          "error"
        ],
        "@angular-eslint/no-inputs-metadata-property": [
          "error"
        ],
        "@angular-eslint/no-lifecycle-call": [
          "error"
        ],
        "@angular-eslint/no-output-native": [
          "error"
        ],
        "@angular-eslint/no-output-on-prefix": [
          "error"
        ],
        "@angular-eslint/no-output-rename": [
          "error"
        ],
        "@angular-eslint/no-outputs-metadata-property": [
          "error"
        ],
        "@angular-eslint/no-pipe-impure": [
          "error"
        ],
        "@angular-eslint/no-queries-metadata-property": [
          "error"
        ],
        "@angular-eslint/prefer-on-push-component-change-detection": [
          "error"
        ],
        "@angular-eslint/prefer-output-readonly": [
          "error"
        ],
        "@angular-eslint/pipe-prefix": [
          "error",
          {
            "prefixes": [
              "easy"
            ]
          }
        ],
        "@angular-eslint/relative-url-prefix": [
          "error"
        ],
        "@angular-eslint/use-component-selector": [
          "error"
        ],
        "@angular-eslint/use-component-view-encapsulation": [
          "error"
        ],
        "@angular-eslint/use-injectable-provided-in": [
          "error"
        ],
        "@angular-eslint/use-lifecycle-interface": [
          "error"
        ],
        "@angular-eslint/use-pipe-decorator": [
          "error"
        ],
        "@angular-eslint/use-pipe-transform-interface": [
          "error"
        ],
        "@typescript-eslint/adjacent-overload-signatures": [
          "error"
        ],
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array",
            "readonly": "array"
          }
        ],
        /* "@typescript-eslint/await-thenable": [
          "error"
        ], */
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "minimumDescriptionLength": 10,
            "ts-check": false,
            "ts-expect-error": "allow-with-description",
            "ts-ignore": "allow-with-description",
            "ts-nocheck": "allow-with-description"
          }
        ],
        "@typescript-eslint/ban-tslint-comment": [
          "error"
        ],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Boolean": {
                "message": "Use boolean instead",
                "fixWith": "boolean"
              },
              "Number": {
                "message": "Use number instead",
                "fixWith": "number"
              },
              "String": {
                "message": "Use string instead",
                "fixWith": "string"
              }
            }
          }
        ],
        "@typescript-eslint/brace-style": [
          "error",
          "1tbs"
        ],
        "@typescript-eslint/class-literal-property-style": [
          "error",
          "getters"
        ],
        "@typescript-eslint/comma-dangle": [
          "error",
          "never"
        ],
        "@typescript-eslint/comma-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "never"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": [
          "error",
          "interface"
        ],
        "@typescript-eslint/consistent-type-imports": "off"/* [
          "error",
          {
            "disallowTypeAnnotations": true,
            "prefer": "no-type-imports"
          }
        ] */,
        "@typescript-eslint/default-param-last": [
          "error"
        ],
        "@typescript-eslint/dot-notation": "off"/* [
          "error",
          {
            "allowKeywords": true,
            "allowPattern": "",
            "allowPrivateClassPropertyAccess": true
          }
        ] */,
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
            "allowDirectConstAssertionInArrowFunctions": false,
            "allowExpressions": true,
            "allowHigherOrderFunctions": false,
            "allowTypedFunctionExpressions": false
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "ignoredMethodNames": [

            ],
            "overrides": {
              "accessors": "explicit",
              "constructors": "explicit",
              "methods": "explicit",
              "parameterProperties": "explicit",
              "properties": "explicit"
            }
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": [
          "error",
          {
            "allowArgumentsExplicitlyTypedAsAny": false,
            "allowDirectConstAssertionInArrowFunctions": false,
            "allowedNames": [

            ],
            "allowHigherOrderFunctions": false,
            "allowTypedFunctionExpressions": false
          }
        ],
        "@typescript-eslint/func-call-spacing": [
          "error",
          "never"/* ,
          {
            "allowNewlines": true
          } */
        ],
        "@typescript-eslint/indent": [
          "error",
          "tab",
          {
            "ArrayExpression": 1,
            "CallExpression": {
              "arguments": 1
            },
            "flatTernaryExpressions": true,
            "FunctionDeclaration": {
              "body": 1,
              "parameters": 2
            },
            "FunctionExpression": {
              "body": 1,
              "parameters": 2
            },
            "ignoredNodes": [

            ],
            "ImportDeclaration": 1,
            "MemberExpression": 0,
            "ObjectExpression": 1,
            "offsetTernaryExpressions": true,
            "outerIIFEBody": 0,
            "SwitchCase": 1,
            "VariableDeclarator": {
              "const": 0,
              "let": 0,
              "var": 0
            }
          }
        ],
        "@typescript-eslint/init-declarations": [
          "error",
          "never",
          {
            "ignoreForLoopInit": false
          }
        ],
        "@typescript-eslint/keyword-spacing": [
          "error",
          {
            "after": true,
            "before": true,
            "overrides": {
              /* "if": {
                "after": true
              } */
            }
          }
        ],
        "@typescript-eslint/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterOverload": false,
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "comma",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "comma",
              "requireLast": true
            },
            "overrides": {
              "interface": {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": true
                }
              },
              "typeLiteral": {
                "multiline": {
                  "delimiter": "comma",
                  "requireLast": false
                },
                "singleline": {
                  "delimiter": "comma",
                  "requireLast": true
                }
              }
            }
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": {
              "memberTypes": [
                // Index signature
                "signature",

                // Fields
                "public-static-field",
                "protected-static-field",
                "private-static-field",

                "public-decorated-field",
                "protected-decorated-field",
                "private-decorated-field",

                "public-instance-field",
                "protected-instance-field",
                "private-instance-field",

                "public-abstract-field",
                "protected-abstract-field",
                "private-abstract-field",

                "public-field",
                "protected-field",
                "private-field",

                "static-field",
                "instance-field",
                "abstract-field",

                "decorated-field",

                "field",

                // Constructors
                "public-constructor",
                "protected-constructor",
                "private-constructor",

                "constructor",

                // Methods
                "public-static-method",
                "protected-static-method",
                "private-static-method",

                "public-decorated-method",
                "protected-decorated-method",
                "private-decorated-method",

                "public-instance-method",
                "protected-instance-method",
                "private-instance-method",

                "public-abstract-method",
                "protected-abstract-method",
                "private-abstract-method",

                "public-method",
                "protected-method",
                "private-method",

                "static-method",
                "instance-method",
                "abstract-method",

                "decorated-method",

                "method"
              ],
              "order": "alphabetically"
            }
          }
        ],
        "@typescript-eslint/method-signature-style": [
          "error",
          "property"
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "format": [
              "strictCamelCase"
            ],
            "leadingUnderscore": "forbid",
            "selector": "default",
            "trailingUnderscore": "forbid"
          },
          {
            "format": [
              "strictCamelCase"
            ],
            "selector": "variableLike"
          },
          {
            "format": [
              "strictCamelCase"
            ],
            "selector": "memberLike"
          },
          /* {
            "format": [
              "PascalCase"
            ],
            "prefix": [
              "can",
              "did",
              "has",
              "is",
              "should",
              "will"
            ],
            "selector": "variable",
            "types": [
              "boolean"
            ]
          }, */
          {
            "custom": {
              "match": false,
              "regex": "^I[A-Z]"
            },
            "format": [
              "StrictPascalCase"
            ],
            "selector": "interface"
          },
          {
            "format": [
              "StrictPascalCase"
            ],
            "selector": "typeLike"
          }
        ],
        "@typescript-eslint/no-array-constructor": [
          "error"
        ],
        /* "@typescript-eslint/no-base-to-string": [
          "error",
          {
            "ignoredTypeNames": [
              "RegExp",
              "URL",
              "URLSearchParams"
            ]
          }
        ], */
        "@typescript-eslint/no-confusing-non-null-assertion": [
          "error"
        ],
        "@typescript-eslint/no-dupe-class-members": [
          "error"
        ],
        "@typescript-eslint/no-dynamic-delete": [
          "error"
        ],
        "@typescript-eslint/no-empty-function": [
          "error"/* ,
          {
            "allow": [
              "arrowFunctions",
              "asyncFunctions",
              "asyncMethods",
              "constructors",
              "decoratedFunctions",
              "functions",
              "generatorFunctions",
              "generatorMethods",
              "getters",
              "methods",
              "private-constructors",
              "protected-constructors",
              "setters"
            ]
          } */
        ],
        "@typescript-eslint/no-empty-interface": [
          "error",
          {
            "allowSingleExtends": false
          }
        ],
        "@typescript-eslint/no-explicit-any": [
          "error",
          {
            "fixToUnknown": false,
            "ignoreRestArgs": false
          }
        ],
        "@typescript-eslint/no-extra-non-null-assertion": [
          "error"
        ],
        "@typescript-eslint/no-extra-parens": [
          "error",
          "all",
          {
            "conditionalAssign": false,
            "enforceForArrowConditionals": false,
            "enforceForFunctionPrototypeMethods": false,
            "enforceForNewInMemberExpressions": false,
            "enforceForSequenceExpressions": false,
            "ignoreJSX": "none",
            "nestedBinaryExpressions": false,
            "returnAssign": false
          }
        ],
        "@typescript-eslint/no-extra-semi": [
          "error"
        ],
        "@typescript-eslint/no-extraneous-class": [
          "error",
          {
            "allowConstructorOnly": true,
            "allowEmpty": true,
            "allowStaticOnly": false,
            "allowWithDecorator": false
          }
        ],
        /* "@typescript-eslint/no-floating-promises": [
          "error",
          {
            "ignoreIIFE": false,
            "ignoreVoid": false
          }
        ], */
        "@typescript-eslint/no-for-in-array": [
          "error"
        ],
        "@typescript-eslint/no-implicit-any-catch": [
          "error",
          {
            "allowExplicitAny": false
          }
        ],
        /* "@typescript-eslint/no-implied-eval": [
          "error"
        ], */
        "@typescript-eslint/no-inferrable-types": "off"/* [
          "error",
          {
            "ignoreParameters": false,
            "ignoreProperties": false
          }
        ] */,
        "@typescript-eslint/no-invalid-this": [
          "error",
          {
            "capIsConstructor": false
          }
        ],
        "@typescript-eslint/no-invalid-void-type": [
          "error",
          {
            "allowAsThisParameter": false,
            "allowInGenericTypeArguments": true
          }
        ],
        "@typescript-eslint/no-loop-func": [
          "error"
        ],
        "@typescript-eslint/no-loss-of-precision": [
          "error"
        ],
        "@typescript-eslint/no-magic-numbers": [
          "error",
          {
            "detectObjects": false,
            "enforceConst": true,
            "ignore": [
              1
            ],
            "ignoreArrayIndexes": true,
            "ignoreDefaultValues": false,
            "ignoreEnums": false,
            "ignoreNumericLiteralTypes": false,
            "ignoreReadonlyClassProperties": false
          }
        ],
        "@typescript-eslint/no-misused-new": [
          "error"
        ],
        /* "@typescript-eslint/no-misused-promises": [
          "error",
          {
            "checksConditionals": true,
            "checksVoidReturn": true
          }
        ], */
        "@typescript-eslint/no-namespace": [
          "error",
          {
            "allowDeclarations": false,
            "allowDefinitionFiles": false
          }
        ],
        "@typescript-eslint/no-non-null-asserted-optional-chain": [
          "error"
        ],
        "@typescript-eslint/no-non-null-assertion": [
          "off"
        ],
        "@typescript-eslint/no-parameter-properties": [
          "error",
          {
            "allows": [
              "private"
            ]
          }
        ],
        "@typescript-eslint/no-redeclare": [
          "error",
          {
            "builtinGlobals": true,
            "ignoreDeclarationMerge": false
          }
        ],
        "@typescript-eslint/no-require-imports": [
          "error"
        ],
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "allow": [
              "module",
              "require"
            ],
            "builtinGlobals": false,
            "hoist": "all",
            "ignoreFunctionTypeParameterNameValueShadow": false,
            "ignoreTypeValueShadow": false
          }
        ],
        "@typescript-eslint/no-this-alias": [
          "error",
          {
            "allowDestructuring": false,
            "allowedNames": [

            ]
          }
        ],
        /* "@typescript-eslint/no-throw-literal": [
          "error"
        ], */
        "@typescript-eslint/no-type-alias": [
          "error",
          {
            "allowAliases": "never", // "always" "in-intersections" "in-unions" "in-unions-and-intersections"
            "allowCallbacks": "never",
            "allowConditionalTypes": "never",
            "allowConstructors": "never",
            "allowLiterals": "never", // "always" "in-intersections" "in-unions" "in-unions-and-intersections"
            "allowMappedTypes": "never", // "always" "in-intersections" "in-unions" "in-unions-and-intersections"
            "allowTupleTypes": "never" // "always" "in-intersections" "in-unions" "in-unions-and-intersections"
          }
        ],
       /*  "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
          "error",
          {
            "allowComparingNullableBooleansToFalse": false,
            "allowComparingNullableBooleansToTrue": false
          }
        ], */
        /* "@typescript-eslint/no-unnecessary-condition": [
          "error",
          {
            "allowConstantLoopConditions": false,
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
          }
        ], */
        /* "@typescript-eslint/no-unnecessary-qualifier": [
          "error"
        ], */
        /* "@typescript-eslint/no-unnecessary-type-arguments": [
          "error"
        ], */
        /* "@typescript-eslint/no-unnecessary-type-assertion": [
          "error",
          {
            "typesToIgnore": [

            ]
          }
        ], */
        /* "@typescript-eslint/no-unsafe-assignment": [
          "error"
        ], */
        /* "@typescript-eslint/no-unsafe-call": [
          "error"
        ], */
        /* "@typescript-eslint/no-unsafe-member-access": [
          "error"
        ], */
        /* "@typescript-eslint/no-unsafe-return": [
          "error"
        ], */
        "@typescript-eslint/no-unused-expressions": [
          "error",
          {
            "allowShortCircuit": false,
            "allowTaggedTemplates": false,
            "allowTernary": true
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "args": "all",
            "argsIgnorePattern": "",
            "caughtErrors": "all",
            "caughtErrorsIgnorePattern": "",
            "ignoreRestSiblings": false,
            "vars": "all",
            "varsIgnorePattern": ""
          }
        ],
        "@typescript-eslint/no-unused-vars-experimental": [
          "error",
          {
            "ignoreArgsIfArgsAfterAreUsed": false,
            "ignoredNamesRegex": false
          }
        ],
        "@typescript-eslint/no-use-before-define": [
          "error",
          {
            "classes": true,
            "enums": true,
            "functions": true,
            "ignoreTypeReferences": false,
            "typedefs": true,
            "variables": true
          }
        ],
        "@typescript-eslint/no-useless-constructor": [
          "error"
        ],
        "@typescript-eslint/no-var-requires": [
          "error"
        ],
        "@typescript-eslint/prefer-as-const": [
          "error"
        ],
        "@typescript-eslint/prefer-enum-initializers": [
          "error"
        ],
        "@typescript-eslint/prefer-for-of": [
          "error"
        ],
        "@typescript-eslint/prefer-function-type": [
          "error"
        ],
        /* "@typescript-eslint/prefer-includes": [
          "error"
        ], */
        "@typescript-eslint/prefer-literal-enum-member": [
          "error"
        ],
        "@typescript-eslint/prefer-namespace-keyword": [
          "error"
        ],
        /* "@typescript-eslint/prefer-nullish-coalescing": [
          "error",
          {
            "ignoreConditionalTests": false,
            "ignoreMixedLogicalExpressions": false
          }
        ], */
        "@typescript-eslint/prefer-optional-chain": [
          "error"
        ],
        /* "@typescript-eslint/prefer-readonly": [
          "error",
          {
            "onlyInlineLambdas": true
          }
        ], */
        /* "@typescript-eslint/prefer-readonly-parameter-types": [
          "error",
          {
            "checkParameterProperties": true
          }
        ], */
        /* "@typescript-eslint/prefer-reduce-type-parameter": [
          "error"
        ], */
        /* "@typescript-eslint/prefer-regexp-exec": [
          "error"
        ], */
        /* "@typescript-eslint/prefer-string-starts-ends-with": [
          "error"
        ], */
        "@typescript-eslint/prefer-ts-expect-error": [
          "error"
        ],
        /* "@typescript-eslint/promise-function-async": [
          "error",
          {
            "allowAny": false,
            "allowedPromiseNames": [
              "Thenable"
            ],
            "checkArrowFunctions": true,
            "checkFunctionDeclarations": true,
            "checkFunctionExpressions": true,
            "checkMethodDeclarations": true
          }
        ], */
        "@typescript-eslint/quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": true
          }
        ],
        /* "@typescript-eslint/require-array-sort-compare": [
          "error",
          {
            "ignoreStringArrays": false
          }
        ], */
        /* "@typescript-eslint/require-await": [
          "error"
        ], */
        /* "@typescript-eslint/restrict-plus-operands": [
          "error",
          {
            "checkCompoundAssignments": true
          }
        ], */
        /* "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNullish": false,
            "allowNumber": false
          }
        ], */
        /* "@typescript-eslint/return-await": [
          "error",
          "always"
        ], */
        "@typescript-eslint/semi": [
          "error",
          "always",
          {
            "omitLastInOneLineBlock": false
          }
        ],
        "@typescript-eslint/space-before-function-paren": [
          "error",
          {
            "anonymous": "never",
            "asyncArrow": "never",
            "named": "never"
          }
        ],
        /* "@typescript-eslint/strict-boolean-expressions": [
          "error",
          {
            "allowAny": false,
            "allowNullableBoolean": false,
            "allowNullableNumber": false,
            "allowNullableObject": true,
            "allowNullableString": false,
            "allowNumber": true,
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": true
            "allowString": true
          }
        ], */
        /* "@typescript-eslint/switch-exhaustiveness-check": [
          "error"
        ], */
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "lib": "never",
            "path": "never",
            "types": "prefer-import"
          }
        ],
        "@typescript-eslint/type-annotation-spacing": [
          "error",
          {
            "after": true,
            "before": false,
            "overrides":
            {
              "arrow":
              {
                "after": true,
                "before": true
              },
              "colon":
              {
                "after": true,
                "before": false
              },
              "parameter":
              {
                "after": true,
                "before": false
              },
              "property":
              {
                "after": true,
                "before": false
              },
              "returnType":
              {
                "after": true,
                "before": false
              },
              "variable":
              {
                "after": true,
                "before": false
              }
            }
          }
        ],
        "@typescript-eslint/typedef": [
          "error",
          {
            "arrayDestructuring": true,
            "arrowParameter": true,
            "memberVariableDeclaration": true,
            "objectDestructuring": true,
            "parameter": true,
            "propertyDeclaration": true,
            "variableDeclaration": true,
            "variableDeclarationIgnoreFunction": false
          }
        ],
        /* "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": false
          }
        ], */
        "@typescript-eslint/unified-signatures": [
          "error"
        ],
        "accessor-pairs": [
          "error",
          {
            "enforceForClassMembers": true,
            "getWithoutSet": false,
            "setWithoutGet": true
          }
        ],
        "array-bracket-newline": [
          "error",
          "always"
        ],
        "array-bracket-spacing": [
          "error",
          "never",
          {
            "arraysInArrays": false,
            "objectsInArrays": false,
            "singleValue": false
          }
        ],
        "array-callback-return": [
          "error",
          {
            "allowImplicit": true,
            "checkForEach": true
          }
        ],
        "array-element-newline": [
          "error",
          {
            "ArrayExpression": {
              "minItems": 1,
              "multiline": true
            },
            "ArrayPattern": {
              "minItems": 1,
              "multiline": true
            }
          }
        ],
        "arrow-body-style": [
          "off"/*
          "error",
          "as-needed",
          {
            "requireReturnForObjectLiteral": false
          } */
        ],
        "arrow-parens": [
          "error",
          "always"
        ],
        "arrow-spacing": [
          "error",
          {
            "after": true,
            "before": true
          }
        ],
        "block-scoped-var": "error",
        "block-spacing": [
          "error",
          "never"
        ],
        "brace-style": "off",
        "camelcase": "off",
        "capitalized-comments": [
          "error",
          "never",
          {
            "ignoreConsecutiveComments": true,
            "ignoreInlineComments": true,
            "ignorePattern": ""
          }
        ],
        "class-methods-use-this": [
          "error"/* ,
          {
            "exceptMethods": [

            ]
          } */
        ],
        "comma-dangle": "off",
        "comma-spacing": "off",
        "comma-style": [
          "error",
          "last"
        ],
        "complexity": [
          "off"/* ,
          {
            "max": 20
          } */
        ],
        "computed-property-spacing": [
          "error",
          "never",
          {
            "enforceForClassMembers": true
          }
        ],
        "consistent-return": [
          "error",
          {
            "treatUndefinedAsUnspecified": true
          }
        ],
        "consistent-this": [
          "error",
          "self"
        ],
        "constructor-super": [
          "error"
        ],
        "curly": [
          "error",
          "all"
        ],
        "default-case": [
          "error",
          {
            "commentPattern": "/^No default$/"
          }
        ],
        "default-case-last": "error",
        "default-param-last": "off",
        "dot-location": [
          "error",
          "property"
        ],
        "dot-notation": "off",
        "eol-last": [
          "error",
          "always"
        ],
        "eqeqeq": [
          "error",
          "always",
          {
            "null": "always"
          }
        ],
        "for-direction": "error",
        "func-call-spacing": "off",
        "func-name-matching": [
          "error",
          "always",
          {
            "considerPropertyDescriptor": true,
            "includeCommonJSModuleExports": true
          }
        ],
        "func-names": [
          "error",
          "always",
          {
            "generators": "always"
          }
        ],
        "func-style": [
          "error",
          "declaration",
          {
            "allowArrowFunctions": true
          }
        ],
        "function-call-argument-newline": [
          "error",
          "never"
        ],
        "function-paren-newline": [
          "error",
          "never"
        ],
        "generator-star-spacing": [
          "error",
          {
            "after": false,
            "anonymous": "neither",
            "before": false,
            "method": "neither",
            "named": "neither"
          }
        ],
        "getter-return": [
          "error",
          {
            "allowImplicit": false
          }
        ],
        "grouped-accessor-pairs": [
          "error",
          "getBeforeSet"
        ],
        "guard-for-in": "error",
        "id-denylist": [
          "error",
          "callback",
          "cb",
          "data",
          "e",
          "err",
          "value"
        ],
        "id-length": [
          "error",
          {
            "exceptionPatterns": [

            ],
            "exceptions": [

            ],
            "max": 30,
            "min": 2,
            "properties": "always"
          }
        ],
        "id-match": [
          "error",
          "(?:[a-z]+|[A-Z]+|^)([a-z]|)*",
          {
            "ignoreDestructuring": false,
            "onlyDeclarations": false,
            "properties": true
          }
        ],
        "implicit-arrow-linebreak": [
          "error",
          "beside"
        ],
        "indent": "off",
        "init-declarations": "off",
        "jsx-quotes": [
          "error",
          "prefer-single"
        ],
        "key-spacing": [
          "error",
          {
            "afterColon": true,
            "beforeColon": false
          }
        ],
        "keyword-spacing": "off",
        "linebreak-style": [
          "off"/* ,
          "unix" */
        ],
        "line-comment-position": [
          "error",
          {
            "applyDefaultIgnorePatterns": false,
            "ignorePattern": "eslint",
            "position": "above"
          }
        ],
        "lines-around-comment": [
          "error",
          {
            "afterBlockComment": false,
            "afterLineComment": false,
            "allowArrayEnd": false,
            "allowArrayStart": true,
            "allowBlockEnd": false,
            "allowBlockStart": true,
            "allowClassEnd": false,
            "allowClassStart": true,
            "allowObjectEnd": false,
            "allowObjectStart": true,
            "applyDefaultIgnorePatterns": false,
            "beforeBlockComment": true,
            "beforeLineComment": true,
            "ignorePattern": ""
          }
        ],
        "lines-between-class-members": "off",
        "max-classes-per-file": [
          "error",
          1
        ],
        "max-depth": [
          "error",
          {
            "max": 4
          }
        ],
        "max-len": [
          "error",
          {
            "code": 160
          }
        ],
        "max-lines": [
          "error",
          {
            "max": 300,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "max-lines-per-function": [
          "error",
          {
            "IIFEs": true,
            "max": 150,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "max-nested-callbacks": [
          "error",
          {
            "max": 5
          }
        ],
        "max-params": [
          "error",
          {
            "max": 3
          }
        ],
        "max-statements": [
          "error",
          10,
          {
            "ignoreTopLevelFunctions": true
          }
        ],
        "max-statements-per-line": [
          "error",
          {
            "max": 1
          }
        ],
        "multiline-comment-style": [
          "error",
          "bare-block"
        ],
        "multiline-ternary": [
          "error",
          "never"
        ],
        "new-cap": [
          "error",
          {
            "capIsNew": true,
            "capIsNewExceptionPattern": "",
            "capIsNewExceptions": [
              "Component",
              "Directive",
              "HostBinding",
              "HostListener",
              "Injectable",
              "Input",
              "NgModule",
              "ViewChild",
              "ViewChildren"
            ],
            "newIsCap": true,
            "newIsCapExceptionPattern": "",
            "newIsCapExceptions": [

            ],
            "properties": true
          }
        ],
        "new-parens": [
          "error",
          "always"
        ],
        "newline-per-chained-call": [
          "error",
          {
            "ignoreChainWithDepth": 2
          }
        ],
        "no-alert": "off",
        "no-array-constructor": "off",
        "no-async-promise-executor": "error",
        "no-await-in-loop": "error",
        "no-bitwise": [
          "error",
          {
            "allow": [

            ],
            "int32Hint": false
          }
        ],
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": [
          "error",
          "always"
        ],
        "no-confusing-arrow": [
          "error",
          {
            "allowParens": false
          }
        ],
        "no-console": [
          "error"/* ,
          {
            "allow": [

            ]
          } */
        ],
        "no-constant-condition": [
          "error",
          {
            "checkLoops": true
          }
        ],
        "no-const-assign": "error",
        "no-constructor-return": "error",
        "no-continue": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-div-regex": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "off",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-duplicate-imports": "off",
        "no-else-return": [
          "error",
          {
            "allowElseIf": false
          }
        ],
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": false
          }
        ],
        "no-empty-character-class": "error",
        "no-empty-function": "off",
        "no-empty-pattern": "error",
        "no-eq-null": "error",
        "no-eval": [
          "error",
          {
            "allowIndirect": false
          }
        ],
        "no-ex-assign": "error",
        "no-extend-native": [
          "error",
          {
            "exceptions": [

            ]
          }
        ],
        "no-extra-bind": "error",
        "no-extra-boolean-cast": [
          "error",
          {
            "enforceForLogicalOperands": true
          }
        ],
        "no-extra-label": "error",
        "no-extra-parens": "off",
        "no-extra-semi": "off",
        "no-fallthrough": [
          "error",
          {
            "commentPattern": "/^Falls through$/"
          }
        ],
        "no-floating-decimal": "off",
        "no-func-assign": "error",
        "no-global-assign": [
          "error",
          {
            "exceptions": [

            ]
          }
        ],
        "no-implicit-coercion": [
          "error",
          {
            "allow": [

            ],
            "boolean": true,
            "number": true,
            "string": true
          }
        ],
        "no-implicit-globals": [
          "error",
          {
            "lexicalBindings": true
          }
        ],
        "no-implied-eval": "off",
        "no-import-assign": "error",
        "no-inline-comments": [
          "off",
          {
            "ignorePattern": ""
          }
        ],
        "no-inner-declarations": [
          "error",
          "both"
        ],
        "no-invalid-regexp": [
          "error",
          {
            "allowConstructorFlags": [
              "u",
              "y"
            ]
          }
        ],
        "no-invalid-this": "off",
        "no-irregular-whitespace": [
          "error",
          {
            "skipComments": false,
            "skipRegExps": false,
            "skipStrings": false,
            "skipTemplates": false
          }
        ],
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": [
          "error",
          {
            "allowLoop": false,
            "allowSwitch": false
          }
        ],
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "off",
        "no-loss-of-precision": "off",
        "no-magic-numbers": "off",
        "no-misleading-character-class": "error",
        "no-mixed-operators": [
          "error",
          {
            "allowSamePrecedence": false,
            "groups": [
              [
                "+",
                "-",
                "*",
                "/",
                "%",
                "**"
              ],
              [
                "&",
                "|",
                "^",
                "~",
                "<<",
                ">>",
                ">>>"
              ],
              [
                "==",
                "!=",
                "===",
                "!==",
                ">",
                ">=",
                "<",
                "<="
              ],
              [
                "&&",
                "||"
              ],
              [
                "??",
                "?:"
              ],
              [
                "in",
                "instanceof"
              ]
            ]
          }
        ],
        "no-mixed-spaces-and-tabs": [
          "error"/* ,
          "smart-tabs" */
        ],
        "no-multi-assign": "error",
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 1,
            "maxBOF": 0,
            "maxEOF": 1
          }
        ],
        "no-multi-spaces": [
          "error",
          {
            "exceptions": {

            },
            "ignoreEOLComments": false
          }
        ],
        "no-multi-str": "error",
        "nonblock-statement-body-position": [
          "error",
          "beside"/* ,
          {
            "overrides": {
              "while": "below"
            }
          } */
        ],
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-object": "error",
        "no-new-symbol": "error",
        "no-new-wrappers": "error",
        "no-null/no-null": "off",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": [
          "error",
          {
            "props": true,
            "ignorePropertyModificationsFor": [

            ],
            "ignorePropertyModificationsForRegex": [

            ]
          }
        ],
        "no-plusplus": [
          "off"/* ,
          {
            "allowForLoopAfterthoughts": true
          } */
        ],
        "no-promise-executor-return": "error",
        "no-proto": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": "off",
        "no-regex-spaces": "error",
        "no-restricted-exports": [
          "error",
          {
            "restrictedNamedExports": [

            ]
          }
        ],
        "no-restricted-imports": [
          "error"/* ,
          {
            "paths": [
              {
                "importNames": [

                ],
                "message": "",
                "name": ""
              }
            ]
          } */
        ],
        "no-restricted-globals": [
          "error",
          {
            "message": "Use local parameter instead.",
            "name": "event"
          },
          {
            "message": "Do not commit fdescribe. Use describe instead.",
            "name": "fdescribe"
          }
        ],
        "no-restricted-properties": [
          "error",
          {
            "message": "Please use Object.defineProperty instead.",
            // "object": "",
            "property": "__defineGetter__"

          }
        ],
        "no-restricted-syntax": [
          "error",
          {
              "selector": "WithStatement",
              "message": "Use dot notation instead."
          }
        ],
        "no-return-assign": [
          "error",
          "always"
        ],
        "no-return-await": "off",
        "no-script-url": "error",
        "no-self-assign": [
          "error",
          {
            "props": true
          }
        ],
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-setter-return": "error",
        "no-shadow": "off",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-tabs": [
          "error",
          {
            "allowIndentationTabs": true
          }
        ],
        "no-template-curly-in-string": "error",
        "no-ternary": "off",
        "no-this-before-super": "error",
        "no-throw-literal": "off",
        "no-trailing-spaces": [
          "error",
          {
            "ignoreComments": false,
            "skipBlankLines": true

          }
        ],
        "no-undef": [
          "error",
          {
            "typeof": true
          }
        ],
        "no-undefined": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": [
          "error",
          {
            "allow":[

            ],
            "allowAfterSuper": false,
            "allowAfterThis": false,
            "allowAfterThisConstructor": false,
            "allowFunctionParams": false,
            "enforceInMethodNames": true
          }
        ],
        "no-unexpected-multiline": "error",
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": [
          "error",
          {
            "defaultAssignment": false
          }
        ],
        "no-unreachable": "error",
        "no-unreachable-loop": [
          "error",
          {
            "ignore": [
              /* "DoWhileStatement",
              "ForInStatement",
              "ForOfStatement",
              "ForStatement",
              "WhileStatement" */
            ]
          }
        ],
        "no-unsafe-finally": "error",
        "no-unsafe-negation": [
          "error",
          {
            "enforceForOrderingRelations": true
          }
        ],
        "no-unused-expressions": "off",
        "no-unused-labels": "error",
        "no-unused-vars": "off",
        "no-use-before-define": "off",
        "no-useless-backreference": "error",
        "no-useless-call": "error",
        "no-useless-catch": "error",
        "no-useless-computed-key": [
          "error",
          {
            "enforceForClassMembers": true
          }
        ],
        "no-useless-concat": "error",
        "no-useless-constructor": "off",
        "no-useless-escape": "error",
        "no-useless-rename": [
          "error",
          {
            "ignoreDestructuring": false,
            "ignoreExport": false,
            "ignoreImport": false
          }
        ],
        "no-useless-return": "error",
        "no-var": "error",
        "no-void": [
          "error",
          {
            "allowAsStatement": false
          }
        ],
        "no-warning-comments": [
          "error",
          {
            "location": "anywhere",
            "terms": [
              "todo"
            ]
          }
        ],
        "no-whitespace-before-property": "error",
        "no-with": "error",
        "object-curly-newline": [
          "error",
          {
            "ExportDeclaration": "never",
            "ImportDeclaration": "never",
            "ObjectExpression": {
              "multiline": true,
              "minProperties": 1
            },
            "ObjectPattern": "never"
          }
        ],
        "object-curly-spacing": [
          "error",
          "always",
          {
            "arraysInObjects": false,
            "objectsInObjects": false
          }
        ],
        "object-property-newline": [
          "error",
          {
            "allowAllPropertiesOnSameLine": false
          }
        ],
        "object-shorthand": [
          "error",
          "never"/* ,
          {
            "avoidExplicitReturnArrows": false,
            "avoidQuotes": false,
            "ignoreConstructors": false
          } */
        ],
        "one-var": [
          "error",
          // "never",
          {
            "const": "never",
            "let": "never",
            "var": "never"
          }
          /* {
            "initialized": "never",
            "uninitialized": "never"
          } */
        ],
        "one-var-declaration-per-line": [
          "error",
          "always"
          // "initializations"
        ],
        "operator-assignment": [
          "error",
          "always"
        ],
        "operator-linebreak": [
          "error",
          "after",
          {
            "overrides": {
              // "+=": "before"
            }
          }
        ],
        "padded-blocks": [
          "error",
          "never"
        ],
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "next": "return",
            "prev": "*"
          },
          {
            "blankLine": "always",
            "next": "*",
            "prev": [
              "const",
              "let",
              "var"
            ]
          },
          {
            "blankLine": "never",
            "next": [
              "const",
              "let",
              "var"
            ],
            "prev": [
              "const",
              "let",
              "var"
            ]
          },
          {
            "blankLine": "always",
            "next": "let",
            "prev": "const"
          }
        ],
        "prefer-arrow-callback": [
          "error",
          {
            "allowNamedFunctions": false,
            "allowUnboundThis": false
          }
        ],
        "prefer-const": [
          "error",
          {
            "destructuring": "all",
            "ignoreReadBeforeAssign": false
          }
        ],
        "prefer-destructuring": [
          "error",
          {
            "AssignmentExpression":
            {
              "array": false,
              "object": false
            },
            "VariableDeclarator":
            {
              "array": true,
              "object": true
            }
          },
          {
            "enforceForRenamedProperties": false
          }
        ],
        "prefer-exponentiation-operator": "error",
        "prefer-named-capture-group": "error",
        "prefer-numeric-literals": "error",
        "prefer-object-spread": "error",
        "prefer-promise-reject-errors": [
          "error",
          {
            "allowEmptyReject": false
          }
        ],
        "prefer-regex-literals": [
          "error",
          {
            "disallowRedundantWrapping": true
          }
        ],
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "quote-props": [
          "error",
          "as-needed",
          {
            "keywords": false,
            "numbers": true,
            "unnecessary": true
          }
        ],
        "quotes": "off",
        "radix": [
          "error",
          "always"
        ],
        "require-atomic-updates": "error",
        "require-await": "off",
        "require-unicode-regexp": "error",
        "require-yield": "error",
        "rest-spread-spacing": [
          "error",
          "never"
        ],
        "semi": "off",
        "semi-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "semi-style": [
          "error",
          "last"
        ],
        "sort-imports": [
          "error",
          {
            "allowSeparatedGroups": true,
            "ignoreCase": true,
            "ignoreDeclarationSort": true,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": [
              "all",
              "single",
              "multiple",
              "none"
            ]
          }
        ],
        "sort-keys": [
          "off"/* ,
          "asc",
          {
            "caseSensitive": false,
            "minKeys": 2,
            "natural": true
          } */
        ],
        "sort-vars": [
          "error",
          {
            "ignoreCase": true
          }
        ],
        "space-before-blocks": [
          "error",
          {
            "classes": "always",
            "functions": "always",
            "keywords": "always"
          }
        ],
        "space-before-function-paren": "off",
        "spaced-comment": [
          "error",
          "always",
          {
            "block": {
              "balanced": true,
              "exceptions": [

              ],
              "markers": [

              ]
            },
            "line": {
              "exceptions": [

              ],
              "markers": [

              ]
            }
          }
        ],
        "space-infix-ops": [
          "error",
          {
            "int32Hint": false
          }
        ],
        "space-in-parens": [
          "error",
          "never"/* ,
          {
            "exceptions": [

            ]
          } */
        ],
        "space-unary-ops": [
          "error",
          {
            "nonwords": false,
            "overrides": {

            },
            "words": true
          }
        ],
        "strict": [
          "error",
          "never"
        ],
        "switch-colon-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        "symbol-description": "error",
        "template-curly-spacing": [
          "error",
          "never"
        ],
        "template-tag-spacing": [
          "error",
          "always"
        ],
        "unicode-bom": [
          "error",
          "never"
        ],
        "unicorn/filename-case": [
          "error",
          {
            "case": "kebabCase"
          }
        ],
        "use-isnan": [
          "error",
          {
            "enforceForIndexOf": true,
            "enforceForSwitchCase": true
          }
        ],
        "valid-typeof": [
          "error",
          {
            "requireStringLiterals": true
          }
        ],
        "vars-on-top": "error",
        "wrap-iife": [
          "error",
          "outside",
          {
            "functionPrototypeMethods": false
          }
        ],
        "wrap-regex": "error",
        "yield-star-spacing": [
          "error",
          "neither"
        ],
        "yoda": [
          "error",
          "never",
          {
            "exceptRange": false
          }
        ]
      }
    },
    {
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "files": [
        "*.html"
      ],
      "rules": {
        "@angular-eslint/template/accessibility-alt-text": [
          "error"
        ],
        "@angular-eslint/template/accessibility-elements-content": [
          "error"
        ],
        "@angular-eslint/template/accessibility-label-for": [
          "error",
          {
            "controlComponents": [

            ],
            "labelAttributes": [

            ],
            "labelComponents": [

            ]
          }
        ],
        "@angular-eslint/template/accessibility-table-scope": [
          "error"
        ],
        "@angular-eslint/template/accessibility-valid-aria": [
          "error"
        ],
        "@angular-eslint/template/banana-in-box": [
          "error"
        ],
        "@angular-eslint/template/click-events-have-key-events": [
          "error"
        ],
        "@angular-eslint/template/mouse-events-have-key-events": [
          "error"
        ],
        "@angular-eslint/template/conditional-complexity": [
          "error",
          {
            "maxComplexity": 4
          }
        ],
        "@angular-eslint/template/cyclomatic-complexity": [
          "error",
          {
            "maxComplexity": 6
          }
        ],
        "@angular-eslint/template/i18n": [
          "off"
        ],
        "@angular-eslint/template/no-any": [
          "error"
        ],
        "@angular-eslint/template/no-autofocus": [
          "error"
        ],
        "@angular-eslint/template/no-call-expression": [
          "error"
        ],
        "@angular-eslint/template/no-distracting-elements": [
          "error"
        ],
        "@angular-eslint/template/no-negated-async": [
          "error"
        ],
        "@angular-eslint/template/no-positive-tabindex": [
          "error"
        ],
        "@angular-eslint/template/use-track-by-function": [
          "off"
        ],
        "@typescript-eslint/quotes": [
          "error",
          "double",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": true
          }
        ],
        "max-len": [
          "error",
          {
            "code": 160
          }
        ],
        "quotes": "off"
      }
    }
  ],
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ]
}
